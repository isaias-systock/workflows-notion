name: Notion on push with semver bump

on:
  push:
    branches:
      - 'master'

jobs:
  notion:
    runs-on: ubuntu-latest
    steps:
      - name: Calculando a versão correta para montar o payload
        id: build
        uses: actions/github-script@v7
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        with:
          script: |
            const NOTION_VERSION = '2022-06-28';
            const DB_ID = process.env.NOTION_DATABASE_ID;
            const token = process.env.NOTION_TOKEN;

            const PROP_VERSION = 'Versão';
            const PROP_CLIENTES = 'Clientes';
            const PROP_TIPO = 'Tipo';
            const PROP_DATA = 'Data de Lançamento';
            const PROP_RESP = 'Responsável';
            const PROP_NOTAS_INT = 'Notas Internas';
            const PROP_ZENDESK = 'Zendesk';
            const PROP_NOTAS_CS = 'Notas CS';

            const branch = (context.payload.ref || '').replace('refs/heads/','');
            const head = context.payload.head_commit || {};
            const author = head.author?.name || context.payload.pusher?.name || 'Desconhecido';
            const today = new Date().toISOString().slice(0,10);

            const isHotfix = branch.startsWith('hotfix/');
            const isFeature = branch.startsWith('feature/');

            const semverRe = /^(\d+)\.(\d+)\.(\d+)$/;
            const parseSemver = (s) => {
              const m = (s||'').trim().match(semverRe);
              if (!m) return null;
              return { major: +m[1], minor: +m[2], patch: +m[3] };
            };
            const cmpSemver = (a,b) => (
              a.major - b.major || a.minor - b.minor || a.patch - b.patch
            );

            const headers = {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
              'Notion-Version': NOTION_VERSION
            };

            let start_cursor = undefined;
            let max = null;
            let maxStr = null;

            while (true) {
              const body = {
                page_size: 100,
                start_cursor
              };
            
              const res = await fetch(`https://api.notion.com/v1/databases/${DB_ID}/query`, {
                method: 'POST',
                headers,
                body: JSON.stringify(body)
              });
              
              if (!res.ok) {
                const t = await res.text();
                core.setFailed(`Erro ao consultar Notion DB: ${res.status} ${t}`);
                return;
              }
              
              const data = await res.json();
              for (const page of data.results || []) {
                const prop = page.properties?.[PROP_VERSION];
                const titleObj = prop?.type === 'title' ? prop.title : null;
                const text = (titleObj && titleObj.length ? titleObj[0].plain_text : '').trim();
                const v = parseSemver(text);
                
                if (v) {
                  if (!max || cmpSemver(v,max) > 0) {
                    max = v;
                    maxStr = text;
                  }
                }
              }

              if (!data.has_more) break;
              start_cursor = data.next_cursor;
            }

            if (!max) {
              max = { major: 0, minor: 0, patch: 0 };
              maxStr = '0.0.0';
            }

            let next = {...max};
            let tipo = null;
            
            if (isHotfix) {
              next.patch += 1;  // hotfix: 4.3.2 -> 4.3.3
              tipo = 'Bug';
            } else if (isFeature) {
              next.minor += 1;  // feature: 4.3.2 -> 4.4.2
              tipo = 'Melhoria';
            } else {
              // ...
            }
            
            const nextStr = `${next.major}.${next.minor}.${next.patch}`;
            core.info(`Última versão encontrada: ${maxStr} | Nova versão: ${nextStr}`);

            const payload = {
              parent: { database_id: DB_ID },
              properties: {
                [PROP_VERSION]: { title: [{ text: { content: nextStr } }] },
                [PROP_CLIENTES]: { rich_text: [{ text: { content: 'EMPRESA X' } }] },
                [PROP_TIPO]: { select: { name: tipo } },
                [PROP_DATA]: { date: { start: today } },
                [PROP_RESP]: { multi_select: [{ name: author }] },
                [PROP_NOTAS_INT]: { rich_text: [{ text: { content: head.message || '' } }] },
                [PROP_ZENDESK]: { rich_text: [{ text: { content: head.id || '' } }] },
                [PROP_NOTAS_CS]: { rich_text: [{ text: { content: `Repo: ${context.payload.repository.full_name} · Branch: ${branch} · Compare: ${context.payload.compare}` } }] }
              },
              children: [
                {
                  object: 'block',
                  type: 'heading_2',
                  heading_2: { rich_text: [{ type: 'text', text: { content: 'Commit' } }] }
                },
                {
                  object: 'block',
                  type: 'paragraph',
                  paragraph: { rich_text: [{ type: 'text', text: { content: head.message || 'Sem mensagem' } }] }
                }
              ]
            };

            core.setOutput('nextVersion', nextStr);
            core.setOutput('payload', JSON.stringify(payload));

      - name: Enviado o registro para o Notion
        if: ${{ steps.build.outputs.payload != '' }}
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_API_KEY }}
        run: |
          curl -sS -X POST "https://api.notion.com/v1/pages" \
            -H "Authorization: Bearer $NOTION_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Notion-Version: 2022-06-28" \
            --data '${{ steps.build.outputs.payload }}'